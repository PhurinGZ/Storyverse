"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Send, Bot, User, ChevronRight, ChevronLeft, Copy, PlusCircle } from "lucide-react"

interface Message {
  id: string
  type: "user" | "ai"
  content: string
  timestamp: Date
}

interface AIChatPanelProps {
  autoContinue: boolean
  selectedText: string
  isOpen: boolean
  onToggle: () => void
  onInsertText?: (text: string) => void
}

const suggestionButtons = [
  { text: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤", icon: "‚úèÔ∏è", prompt: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô" },
  { text: "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏û‡∏•‡∏¥‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á", icon: "üåü", prompt: "‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏û‡∏•‡∏¥‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°?" },
  { text: "‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", icon: "üèõÔ∏è", prompt: "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏â‡∏≤‡∏Å‡∏ô‡∏µ‡πâ" },
  { text: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤", icon: "üí¨", prompt: "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏ô‡∏â‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°?" },
  { text: "‡πÅ‡∏£‡∏á‡∏à‡∏π‡∏á‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£", icon: "üé≠", prompt: "‡∏ä‡πà‡∏ß‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÅ‡∏£‡∏á‡∏à‡∏π‡∏á‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ" },
  { text: "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠", icon: "üìù", prompt: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ú‡∏°‡∏´‡∏¢‡∏∏‡∏î‡πÑ‡∏ß‡πâ" },
]

export function AIChatPanel({ autoContinue, selectedText, isOpen, onToggle, onInsertText }: AIChatPanelProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      type: "ai",
      content:
        "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏° StoryAI ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏ú‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏£‡∏∞‡∏î‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ ‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏≤‡∏ä‡∏ô‡∏∞‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö?",
      timestamp: new Date(),
    },
  ])
  const [inputValue, setInputValue] = useState("")
  const [isTyping, setIsTyping] = useState(false)
  const scrollAreaRef = useRef<HTMLDivElement>(null)
  const inputRef = useRef<HTMLInputElement>(null)

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight
    }
  }, [messages])

  const handleSendMessage = async (message?: string) => {
    const messageText = message || inputValue.trim()
    if (!messageText) return

    const userMessage: Message = {
      id: Date.now().toString(),
      type: "user",
      content: messageText,
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInputValue("")
    setIsTyping(true)

    // Simulate AI response with different types of responses
    setTimeout(() => {
      const aiResponses = [
        "‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì! ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏°:\n\n‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏î‡∏∑‡πà‡∏°‡∏î‡πà‡∏≥‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏© ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏Ç‡∏≠‡∏á‡πÅ‡∏™‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡πÅ‡∏™‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™\n\n‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô ‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡πÄ‡∏ò‡∏≠‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏ó‡∏±‡∏Å‡∏©‡πå‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ß‡∏¥‡πÄ‡∏®‡∏© ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ò‡∏≠‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏Ç‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏°‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏®‡∏ï‡∏ß‡∏£‡∏£‡∏© ‡∏£‡∏≠‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏°‡∏≤‡∏ñ‡∏∂‡∏á",
        "‡∏ú‡∏°‡∏ä‡∏≠‡∏ö‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πâ‡∏ô‡∏°‡∏≤‡∏Å! ‡∏´‡∏°‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡πâ‡∏≠‡∏ô‡∏´‡∏¥‡∏ô‡∏õ‡∏π‡∏ñ‡∏ô‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏â‡∏≤‡∏Å‡∏ô‡∏µ‡πâ:\n\n‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÉ‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏ã‡∏≤‡∏£‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ó‡∏≤‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå\n‚Ä¢ ‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ - ‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á?\n‚Ä¢ ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ - ‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡∏ã‡∏≤‡∏£‡πà‡∏≤‡∏≠‡∏≤‡∏à‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡πÄ‡∏´‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏ô‡πâ‡∏≠‡∏¢‡πÜ ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏Å‡πÉ‡∏ö‡πâ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏°‡∏≤\n\n‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÑ‡∏´‡∏ô‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö?",
        "‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏â‡∏≤‡∏Å‡∏ô‡∏µ‡πâ ‡∏ú‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∂‡∏á‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡∏ú‡πà‡∏≤‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤:\n\n\"‡∏ã‡∏≤‡∏£‡πà‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ‡∏°‡∏∑‡∏≠‡∏™‡∏±‡πà‡∏ô‡∏Ç‡∏ì‡∏∞‡∏à‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏à‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ï‡∏π ‡πÄ‡∏ò‡∏≠‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏£‡∏∞‡∏ã‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏£‡∏∞‡∏´‡∏•‡∏≤‡∏î‡∏î‡∏±‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô ‡πÅ‡∏ï‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ò‡∏≠‡πÄ‡∏á‡∏µ‡πà‡∏¢‡∏´‡∏π‡∏ü‡∏±‡∏á ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏≤‡∏¢‡πÑ‡∏õ ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏∞‡∏à‡∏Å‡∏£‡πâ‡∏≤‡∏ô ‡πÄ‡∏á‡∏≤‡∏î‡∏≥‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ä‡πâ‡∏≤‡πÜ ‡∏£‡∏≤‡∏ß‡∏Å‡∏±‡∏ö‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡πÄ‡∏ò‡∏≠‡∏≠‡∏¢‡∏π‡πà\"\n\n‡∏ô‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏ó‡∏∂‡∏Å‡πÉ‡∏à‡∏ï‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ú‡∏°‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?",
        "‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ:\n\n‡∏•‡∏°‡πÄ‡∏ã‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ö‡πÑ‡∏ú‡πà‡πÅ‡∏´‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤ ‡∏™‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏Å‡∏£‡∏ö‡∏ó‡∏µ‡πà‡∏ü‡∏±‡∏á‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏Ñ‡∏£‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏∞‡∏ã‡∏¥‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÇ‡∏ó‡∏°‡∏±‡∏™‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏î‡∏¥‡∏ô ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏ï‡πâ‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ‡πÄ‡∏Ç‡∏≤‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡∏á‡∏≥‡∏°‡∏≤‡∏ï‡∏•‡∏≠‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏µ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏ô‡∏µ‡πâ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£\n\n‡πÄ‡∏Ç‡∏≤‡∏´‡∏¢‡∏¥‡∏ö‡πÇ‡∏Ñ‡∏°‡πÑ‡∏ü‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏Å‡πà‡∏à‡∏≤‡∏Å‡πÇ‡∏ï‡πä‡∏∞‡πÑ‡∏°‡πâ‡∏ú‡∏∏ ‡πÅ‡∏™‡∏á‡πÑ‡∏ü‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡πà‡∏≠‡∏ô‡πÜ ‡∏•‡∏≠‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏Å‡πâ‡∏ß ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡πÇ‡∏ö‡∏£‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡∏ã‡πà‡∏≠‡∏ô‡∏°‡∏≤‡∏ï‡∏•‡∏≠‡∏î",
      ]

      const randomResponse = aiResponses[Math.floor(Math.random() * aiResponses.length)]

      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: "ai",
        content: randomResponse,
        timestamp: new Date(),
      }

      setMessages((prev) => [...prev, aiMessage])
      setIsTyping(false)
    }, 1500)
  }

  const handleSuggestionClick = (suggestion: (typeof suggestionButtons)[0]) => {
    let prompt = suggestion.prompt
    if (selectedText && suggestion.text.includes("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")) {
      prompt += `:\n\n"${selectedText}"`
    }
    handleSendMessage(prompt)
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  const handleCopyText = (text: string) => {
    navigator.clipboard.writeText(text)
    // You could add a toast notification here
  }

  const handleInsertText = (text: string) => {
    if (onInsertText) {
      onInsertText(text)
    }
  }

  // Extract insertable text from AI responses (look for quoted text or specific patterns)
  const extractInsertableText = (content: string) => {
    // Look for quoted text between quotes
    const quotedMatch = content.match(/"([^"]+)"/g)
    if (quotedMatch) {
      return quotedMatch[0].replace(/"/g, '')
    }
    
    // Look for text after specific keywords like "‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ:"
    const insertTextMatch = content.match(/‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà.*?:\s*\n\n(.+?)(?=\n\n|$)/s)
    if (insertTextMatch) {
      return insertTextMatch[1].trim()
    }
    
    // If it's a short response (less than 200 chars), treat it as insertable
    if (content.length < 200 && !content.includes('?') && !content.includes('‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠')) {
      return content.trim()
    }
    
    return null
  }

  // Toggle button that's always visible
  const ToggleButton = () => (
    <Button
      onClick={onToggle}
      variant="outline"
      size="sm"
      className={`fixed top-1/2 -translate-y-1/2 z-50 bg-white border border-stone-200 hover:bg-stone-50 shadow-md ${
        isOpen ? "right-80" : "right-4"
      } transition-all duration-300`}
    >
      {isOpen ? <ChevronRight className="h-4 w-4" /> : <ChevronLeft className="h-4 w-4" />}
    </Button>
  )

  return (
    <>
      <ToggleButton />
      <div
        className={`fixed right-0 top-0 h-full bg-stone-50 shadow-lg transition-all duration-300 z-40 ${
          isOpen ? "w-80 translate-x-0" : "w-80 translate-x-full"
        }`}
      >
        {/* Chat Header */}
        <div className="p-4 border-b border-stone-200 bg-white">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className="p-2 bg-blue-100 rounded-lg">
                <Bot className="h-5 w-5 text-blue-600" />
              </div>
              <div>
                <h3 className="font-semibold text-stone-900">StoryAI Assistant</h3>
                <p className="text-sm text-stone-600">‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
              </div>
            </div>
            <Button
              onClick={onToggle}
              variant="ghost"
              size="sm"
              className="h-6 w-6 p-0"
            >
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>
        </div>

        {/* Chat Messages */}
        <ScrollArea className="flex-1 p-4 h-[calc(100vh-280px)]" ref={scrollAreaRef}>
          <div className="space-y-4">
            {messages.map((message) => (
              <div key={message.id} className={`flex ${message.type === "user" ? "justify-end" : "justify-start"}`}>
                <div className={`max-w-[85%] ${message.type === "user" ? "order-2" : "order-1"}`}>
                  <div className="flex items-center gap-2 mb-1">
                    {message.type === "ai" ? (
                      <Bot className="h-4 w-4 text-blue-600" />
                    ) : (
                      <User className="h-4 w-4 text-stone-600" />
                    )}
                    <span className="text-sm font-medium text-stone-700">
                      {message.type === "ai" ? "StoryAI" : "‡∏Ñ‡∏∏‡∏ì"}
                    </span>
                    <span className="text-xs text-stone-500">
                      {message.timestamp.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
                    </span>
                  </div>
                  <div
                    className={`rounded-2xl px-4 py-3 ${
                      message.type === "user"
                        ? "bg-blue-600 text-white"
                        : "bg-white border border-stone-200 text-stone-800"
                    }`}
                  >
                    <p className="whitespace-pre-wrap leading-relaxed">{message.content}</p>
                    
                    {/* Action buttons for AI messages */}
                    {message.type === "ai" && (
                      <div className="flex gap-2 mt-3 pt-2 border-t border-stone-100">
                        <Button
                          onClick={() => handleCopyText(message.content)}
                          size="sm"
                          variant="ghost"
                          className="h-7 px-2 text-xs text-stone-600 hover:text-stone-800"
                        >
                          <Copy className="h-3 w-3 mr-1" />
                          ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å
                        </Button>
                        
                        {/* Show insert button if there's insertable text */}
                        {extractInsertableText(message.content) && (
                          <Button
                            onClick={() => {
                              const insertableText = extractInsertableText(message.content)
                              if (insertableText) {
                                handleInsertText(insertableText)
                              }
                            }}
                            size="sm"
                            variant="ghost"
                            className="h-7 px-2 text-xs text-blue-600 hover:text-blue-800 hover:bg-blue-50"
                          >
                            <PlusCircle className="h-3 w-3 mr-1" />
                            ‡πÅ‡∏ó‡∏£‡∏Å‡∏•‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
                          </Button>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}

            {isTyping && (
              <div className="flex justify-start">
                <div className="max-w-[85%]">
                  <div className="flex items-center gap-2 mb-1">
                    <Bot className="h-4 w-4 text-blue-600" />
                    <span className="text-sm font-medium text-stone-700">StoryAI</span>
                  </div>
                  <div className="bg-white border border-stone-200 rounded-2xl px-4 py-3">
                    <div className="flex items-center gap-1">
                      <div className="w-2 h-2 bg-stone-400 rounded-full animate-bounce" />
                      <div
                        className="w-2 h-2 bg-stone-400 rounded-full animate-bounce"
                        style={{ animationDelay: "0.1s" }}
                      />
                      <div
                        className="w-2 h-2 bg-stone-400 rounded-full animate-bounce"
                        style={{ animationDelay: "0.2s" }}
                      />
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </ScrollArea>

        {/* Suggestion Buttons */}
        <div className="p-4 border-t border-stone-200 bg-white">
          <div className="mb-3">
            <p className="text-sm font-medium text-stone-700 mb-2">‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πà‡∏ß‡∏ô:</p>
            <div className="grid grid-cols-2 gap-2">
              {suggestionButtons.slice(0, 4).map((suggestion, index) => (
                <Button
                  key={index}
                  variant="outline"
                  size="sm"
                  onClick={() => handleSuggestionClick(suggestion)}
                  className="justify-start gap-2 h-auto py-2 px-3 text-left bg-stone-50 border-stone-200 hover:bg-stone-100 text-stone-700"
                >
                  <span>{suggestion.icon}</span>
                  <span className="text-xs">{suggestion.text}</span>
                </Button>
              ))}
            </div>
          </div>

          {/* Message Input */}
          <div className="flex gap-2">
            <Input
              ref={inputRef}
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å StoryAI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì..."
              className="flex-1 bg-stone-50 border-stone-200 focus:border-blue-500 focus:ring-blue-500"
            />
            <Button
              onClick={() => handleSendMessage()}
              disabled={!inputValue.trim() || isTyping}
              className="bg-blue-600 hover:bg-blue-700 text-white"
            >
              <Send className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </div>
    </>
  )
}